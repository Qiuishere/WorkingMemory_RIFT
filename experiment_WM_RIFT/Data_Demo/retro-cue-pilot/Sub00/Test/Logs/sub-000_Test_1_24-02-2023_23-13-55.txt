Elapsed time is 6.504874 seconds.
{Conversion to double from cell is not possible.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('randSamp', 'C:\Projects\fMRI\BodyBias-Qiu\Functions\Utils\randSamp.m', 34)" style="font-weight:bold">randSamp</a> (<a href="matlab: opentoline('C:\Projects\fMRI\BodyBias-Qiu\Functions\Utils\randSamp.m',34,0)">line 34</a>)
		randlist(ind,:) = varset(ord,:);

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('Body_RunRS_new2', 'C:\Projects\fMRI\BodyBias-Qiu\Body_RunRS_new2.m', 85)" style="font-weight:bold">Body_RunRS_new2</a> (<a href="matlab: opentoline('C:\Projects\fMRI\BodyBias-Qiu\Body_RunRS_new2.m',85,0)">line 85</a>)
    list.figure    = randSamp(figures, NTrial.RS/length(directions) * length(movingDirs), 'n'); % keep this list
    identical for key conditions
} 
opentoline('C:\Projects\fMRI\BodyBias-Qiu\Body_RunRS_new2.m',85,0)
opentoline('C:\Projects\fMRI\BodyBias-Qiu\Body_RunRS_new2.m',85,0)
list.figure    = randSamp(1:length(figures), NTrial.RS/length(directions) * length(movingDirs), 'n'); % keep this list identical for key conditions
list.movingDirs= repelem(movingDirs, minNTrial/length(movingDirs),1);
list.figure    = randSamp(1:length(figures), NTrial.RS/length(directions)/length(movingDirs), 'n'); % keep this list identical for key conditions
list.movingDirs= repelem(movingDirs, minNTrial/length(movingDirs),1);
list.movingDirs= repelem(movingDirs, NTrial.RS/length(movingDirs),1);
themovingdir = 1

themovingdir =

     1

id = list.movingDirs == movingDirs(themovingdir);
id

id =

  48×1 <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a> array

   1
   1
   1
   1
   1
   1
   1
   1
   1
   1
   1
   1
   1
   1
   1
   1
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0

movingDirs

movingDirs =

    -6
     6
    90

temp = randSamp(1:length(directions), length(id), 'n');
temp

temp =

     1
     2
     2
     1
     2
     1
     2
     1
     1
     2
     2
     1
     2
     1
     1
     2
     2
     1
     2
     1
     1
     2
     2
     1
     2
     1
     2
     1
     1
     2
     1
     2
     1
     2
     2
     1
     1
     2
     2
     1
     1
     2
     2
     1
     2
     1
     2
     1

temp = randSamp(1:length(directions), length(find(id)), 'n');
list.direction(id) = directions{temp};
{Unable to perform assignment because the indices on the left side are not compatible with the size of the
right side.
} 
directions{temp}

ans =

    'Back'


ans =

    'Front'


ans =

    'Back'


ans =

    'Front'


ans =

    'Back'


ans =

    'Front'


ans =

    'Front'


ans =

    'Back'


ans =

    'Back'


ans =

    'Front'


ans =

    'Front'


ans =

    'Back'


ans =

    'Back'


ans =

    'Front'


ans =

    'Front'


ans =

    'Back'

list.direction(find(id)) = directions{temp};
{Unable to perform assignment because the indices on the left side are not compatible with the size of the
right side.
} 
list.direction(id) = directions(temp);
temp

temp =

     2
     1
     2
     1
     2
     1
     1
     2
     2
     1
     1
     2
     2
     1
     1
     2

list.direction(id) = directions(temp)';
directions(temp)'

ans =

  1×16 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array

  Columns 1 through 8

    {'Back'}    {'Front'}    {'Back'}    {'Front'}    {'Back'}    {'Front'}    {'Front'}    {'Back'}

  Columns 9 through 16

    {'Back'}    {'Front'}    {'Front'}    {'Back'}    {'Back'}    {'Front'}    {'Front'}    {'Back'}

directions

directions =

  2×1 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array

    {'Front'}
    {'Back' }

list.direction(id) = directions(temp,1);
directions(temp,1)

ans =

  16×1 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array

    {'Back' }
    {'Front'}
    {'Back' }
    {'Front'}
    {'Back' }
    {'Front'}
    {'Front'}
    {'Back' }
    {'Back' }
    {'Front'}
    {'Front'}
    {'Back' }
    {'Back' }
    {'Front'}
    {'Front'}
    {'Back' }

list.direction(id) = directions(temp,1);
list.direction(id,1) = directions(temp,1);
thedirection = 1

thedirection =

     1

clear list
    startAngid     = 1:size(startAngles,1);
    list.figure    = randSamp(1:length(figures), NTrial.RS/length(directions)/length(movingDirs), 'n'); % keep this list identical for key conditions
    list.movingDirs= repelem(movingDirs, NTrial.RS/length(movingDirs),1);
themovingdir = 1

themovingdir =

     1

id = list.movingDirs == movingDirs(themovingdir);
temp = randSamp(1:length(directions), length(find(id)), 'n');
        list.direction(id,1) = directions(temp,1);
thedirection = 1

thedirection =

     1

id2 = id & strcmp(list.direction, directions(thedirection))
{Matrix dimensions must agree.
} 
strcmp(list.direction, directions(thedirection))

ans =

  16×1 <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a> array

   1
   0
   1
   0
   0
   1
   1
   0
   0
   1
   1
   0
   0
   1
   0
   1

[ list.directions, list.angle1, list.view] =deal(zeros(size(list.movingDirs)))

list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

        figure: [8×1 double]
    movingDirs: [48×1 double]
     direction: {16×1 cell}
    directions: [48×1 double]
        angle1: [48×1 double]
          view: [48×1 double]


list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

        figure: [8×1 double]
    movingDirs: [48×1 double]
     direction: {16×1 cell}
    directions: [48×1 double]
        angle1: [48×1 double]
          view: [48×1 double]


list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

        figure: [8×1 double]
    movingDirs: [48×1 double]
     direction: {16×1 cell}
    directions: [48×1 double]
        angle1: [48×1 double]
          view: [48×1 double]

[list.direction, list.angle1, list.view] = deal(zeros(size(list.movingDirs)));
id = list.movingDirs == movingDirs(themovingdir);
        % second condi: directions
        temp = randSamp(1:length(directions), length(find(id)), 'n');
        list.direction(id,1) = directions(temp,1);
{Conversion to double from cell is not possible.
} 
temp

temp =

     2
     1
     1
     2
     2
     1
     1
     2
     1
     2
     1
     2
     2
     1
     2
     1

directions(temp,1)

ans =

  16×1 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array

    {'Back' }
    {'Front'}
    {'Front'}
    {'Back' }
    {'Back' }
    {'Front'}
    {'Front'}
    {'Back' }
    {'Front'}
    {'Back' }
    {'Front'}
    {'Back' }
    {'Back' }
    {'Front'}
    {'Back' }
    {'Front'}

list.direction(id,1) = directions(temp,1);
{Conversion to double from cell is not possible.
} 
list.direction(id,1) = temp;
thedirection = 1

thedirection =

     1

id

id =

  48×1 <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a> array

   1
   1
   1
   1
   1
   1
   1
   1
   1
   1
   1
   1
   1
   1
   1
   1
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0

strcmp(list.direction, thedirection)

ans =

  <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a>

   0

list.direction==thedirection

ans =

  48×1 <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a> array

   0
   1
   1
   0
   0
   1
   1
   0
   1
   0
   1
   0
   0
   1
   0
   1
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0

id2 = id & list.direction==thedirection

id2 =

  48×1 <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a> array

   0
   1
   1
   0
   0
   1
   1
   0
   1
   0
   1
   0
   0
   1
   0
   1
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0

list.figures(id2) = figure2use;
{Undefined function or variable 'figure2use'.
} 
figure2use    = randSamp(1:length(figures), NTrial.RS/length(directions)/length(movingDirs), 'n'); % keep this list identical for key conditions
figure2use

figure2use =

     2
     1
     2
     1
     1
     2
     2
     1

length(id2)

ans =

    48

id2 = id & list.direction==thedirection

id2 =

  48×1 <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a> array

   0
   1
   1
   0
   0
   1
   1
   0
   1
   0
   1
   0
   0
   1
   0
   1
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0

length(id2)

ans =

    48

length(find(id2))

ans =

     8

list.figures(id2) = figure2use;
list.angle1(id2) = ranSamp(startAngles(themovingdir,:), length(find(id2)), 'n');
{Undefined function or variable 'ranSamp'.
} 
list.angle1(id2) = randSamp(startAngles(themovingdir,:), length(find(id2)), 'n');
list.angle2(id2) = list.angle1(id2) + movingDirs(themovingdir);
theangle = 1

theangle =

     1

startAngles(themovingdir,:)

ans =

    45    51

themovingdir

themovingdir =

     1

startAngles(themovingdir,theangle)

ans =

    45

list.angle1==startAngles(themovingdir,theangle)

ans =

  48×1 <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a> array

   0
   0
   1
   0
   0
   0
   1
   0
   0
   0
   1
   0
   0
   1
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0

id3 = id2 & list.angle1==startAngles(themovingdir,theangle);
length(find(id3)
 length(find(id3)
                 
{Error: Invalid expression. When calling a function or indexing a variable, use parentheses. Otherwise, check
for mismatched delimiters.
} 
length(find(id3))

ans =

     4

list.view(id3) = randSamp(1:length(views), length(find(id3)), 'n')

list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

        figure: [8×1 double]
    movingDirs: [48×1 double]
     direction: [48×1 double]
    directions: [48×1 double]
        angle1: [48×1 double]
          view: [48×1 double]
       figures: [0 2 1 0 0 2 1 0 1 0 2 0 0 2 0 1]
        angle2: [0 45 39 0 0 45 39 0 45 0 39 0 0 39 0 45]

for theangle = 1:length(startAngles(themovingdir,:))
                id3 = id2 & list.angle1==startAngles(themovingdir,theangle);
                list.view(id3) = randSamp(1:length(views), length(find(id3)), 'n');
            end
for thedirection = 1:length(directions)
            id2 = id & list.direction==thedirection
            list.figures(id2) = figure2use;
            
            list.angle1(id2) = randSamp(startAngles(themovingdir,:), length(find(id2)), 'n');
            list.angle2(id2) = list.angle1(id2) + movingDirs(themovingdir);
            if themovingdir==3 % large change, move 90 degrees
                list.angle2(id) = 90 - list.angle1(id);
            end
            
            for theangle = 1:length(startAngles(themovingdir,:))
                id3 = id2 & list.angle1==startAngles(themovingdir,theangle);
                list.view(id3) = randSamp(1:length(views), length(find(id3)), 'n');
            end
        end

id2 =

  48×1 <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a> array

   0
   1
   1
   0
   0
   1
   1
   0
   1
   0
   1
   0
   0
   1
   0
   1
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0


id2 =

  48×1 <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a> array

   1
   0
   0
   1
   1
   0
   0
   1
   0
   1
   0
   1
   1
   0
   1
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0

list.correctKey(id) = correctKeys{themovingdir};
views{list.view}
{Array indices must be positive integers or logical values.
} 
themovingdir=3

themovingdir =

     3

id = list.movingDirs == movingDirs(themovingdir);
        list.correctKey(id) = correctKeys{themovingdir};
{Unable to perform assignment because the left and right sides have a different number of elements.
} 
randSamp(1:length(directions), length(find(id)), 'n')

ans =

     1
     2
     1
     2
     1
     2
     2
     1
     1
     2
     1
     2
     1
     2
     2
     1

list.direction(id,1)

ans =

     0
     0
     0
     0
     0
     0
     0
     0
     0
     0
     0
     0
     0
     0
     0
     0

list.direction(id,1) = randSamp(1:length(directions), length(find(id)), 'n');
correctKeys{themovingdir}

ans =

     1     2

[list.correctKey(id)] = deal(correctKeys{themovingdir});
{Unable to perform assignment because the left and right sides have a different number of elements.
} 
[list.correctKey{id}] = deal(correctKeys{themovingdir});
{Unable to perform assignment because brace indexing is not supported for variables of this type.
} 
correctKeys{themovingdir}

ans =

     1     2

list.correctKey{id}
{Brace indexing is not supported for variables of this type.
} 
list.direction(id,1) = randSamp(1:length(directions), length(find(id)), 'n');
thedirection = 1

thedirection =

     1

id2 = id & list.direction==thedirection;
            list.figures(id2) = figure2use;
            
            % third level: start angle            
            list.angle1(id2) = randSamp(startAngles(themovingdir,:), length(find(id2)), 'n');
{Index in position 1 exceeds array bounds (must not exceed 2).
} 
list.figures(id2) = figure2use;
list.angle1(id2) = randSamp(startAngles(themovingdir,:), length(find(id2)), 'n');
{Index in position 1 exceeds array bounds (must not exceed 2).
} 
randSamp(startAngles(themovingdir,:), length(find(id2)), 'n')
{Index in position 1 exceeds array bounds (must not exceed 2).
} 
startAngles(themovingdir,:)
{Index in position 1 exceeds array bounds (must not exceed 2).
} 
startAngles = [45,45+changeAng; 45,45-changeAng; 45,45]; % row1 for moving up, row 2 for moving down
randSamp(startAngles(themovingdir,:), length(find(id2)), 'n')

ans =

    45
    45
    45
    45
    45
    45
    45
    45

list.angle1(id2) = randSamp(startAngles(themovingdir,:), length(find(id2)), 'n');
list.angle2(id2) = list.angle1(id2) + movingDirs(themovingdir);
if themovingdir==3 % large change, move 90 degrees
                list.angle2(id) = 90 - list.angle1(id);
            end
for theangle = 1:length(startAngles(themovingdir,:))
                % fourth: views
                id3 = id2 & list.angle1==startAngles(themovingdir,theangle);
                list.view(id3) = randSamp(1:length(views), length(find(id3)), 'n');
            end
randSamp(1:length(views), length(find(id3)), 'n')

ans =

     1
     2
     2
     1
     1
     2
     1
     2

for thedirection = 1:length(directions)
            id2 = id & list.direction==thedirection;
            list.figures(id2) = figure2use;
            
            % third level: start angle            
            list.angle1(id2) = randSamp(startAngles(themovingdir,:), length(find(id2)), 'n');
            list.angle2(id2) = list.angle1(id2) + movingDirs(themovingdir);
            if themovingdir==3 % large change, move 90 degrees
                list.angle2(id) = 90 - list.angle1(id);
            end
            
            for theangle = 1:length(startAngles(themovingdir,:))
                % fourth: views
                id3 = id2 & list.angle1==startAngles(themovingdir,theangle);
                list.view(id3) = randSamp(1:length(views), length(find(id3)), 'n');
            end
        end
for themovingdir = 1:length(movingDirs)
        id = list.movingDirs == movingDirs(themovingdir);

        % second condi: directions
        list.direction(id,1) = randSamp(1:length(directions), length(find(id)), 'n');
        
        for thedirection = 1:length(directions)
            id2 = id & list.direction==thedirection;
            list.figures(id2) = figure2use;
            
            % third level: start angle            
            list.angle1(id2) = randSamp(startAngles(themovingdir,:), length(find(id2)), 'n');
            list.angle2(id2) = list.angle1(id2) + movingDirs(themovingdir);
            if themovingdir==3 % large change, move 90 degrees
                list.angle2(id) = 90 - list.angle1(id);
            end
            
            for theangle = 1:length(startAngles(themovingdir,:))
                % fourth: views
                id3 = id2 & list.angle1==startAngles(themovingdir,theangle);
                list.view(id3) = randSamp(1:length(views), length(find(id3)), 'n');
            end
        end


    end
length(find(list.view==1&list.direction==3))

ans =

     0

length(find(list.view==1&list.direction==2))

ans =

    12

length(find(list.view==1&list.direction==1))

ans =

    12

list.view      = views{list.view}

list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

        figure: [8×1 double]
    movingDirs: [48×1 double]
     direction: [48×1 double]
    directions: [48×1 double]
        angle1: [48×1 double]
          view: 'L'
       figures: [1×48 double]
        angle2: [1×48 double]
    correctKey: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]

views(list.view)
{Index exceeds the number of array elements (2).
} 
[list.direction, list.angle1, list.view] = deal(zeros(size(list.movingDirs)));
    %first condi: movingdir
    for themovingdir = 1:length(movingDirs)
        id = list.movingDirs == movingDirs(themovingdir);

        % second condi: directions
        list.direction(id,1) = randSamp(1:length(directions), length(find(id)), 'n');
        
        for thedirection = 1:length(directions)
            id2 = id & list.direction==thedirection;
            list.figures(id2) = figure2use;
            
            % third level: start angle            
            list.angle1(id2) = randSamp(startAngles(themovingdir,:), length(find(id2)), 'n');
            list.angle2(id2) = list.angle1(id2) + movingDirs(themovingdir);
            if themovingdir==3 % large change, move 90 degrees
                list.angle2(id) = 90 - list.angle1(id);
            end
            
            for theangle = 1:length(startAngles(themovingdir,:))
                % fourth: views
                id3 = id2 & list.angle1==startAngles(themovingdir,theangle);
                list.view(id3) = randSamp(1:length(views), length(find(id3)), 'n');
            end
        end


    end
views(list.view)

ans =

  48×1 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array

    {'L'}
    {'R'}
    {'R'}
    {'R'}
    {'L'}
    {'R'}
    {'L'}
    {'L'}
    {'L'}
    {'R'}
    {'R'}
    {'R'}
    {'R'}
    {'L'}
    {'L'}
    {'L'}
    {'R'}
    {'R'}
    {'L'}
    {'R'}
    {'L'}
    {'L'}
    {'R'}
    {'L'}
    {'L'}
    {'L'}
    {'L'}
    {'R'}
    {'R'}
    {'L'}
    {'R'}
    {'R'}
    {'R'}
    {'R'}
    {'L'}
    {'L'}
    {'R'}
    {'R'}
    {'L'}
    {'L'}
    {'L'}
    {'L'}
    {'R'}
    {'R'}
    {'L'}
    {'L'}
    {'R'}
    {'R'}

list.view      = views(list.view)

list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

        figure: [8×1 double]
    movingDirs: [48×1 double]
     direction: [48×1 double]
    directions: [48×1 double]
        angle1: [48×1 double]
          view: {48×1 cell}
       figures: [1×48 double]
        angle2: [1×48 double]
    correctKey: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]

Error: <a href="matlab: opentoline('C:\Projects\fMRI\BodyBias-Qiu\Body_RunRS_new2.m',120,22)">File: Body_RunRS_new2.m Line: 120 Column: 22
</a>Invalid expression. Check for missing or extra characters.

opentoline('C:\Projects\fMRI\BodyBias-Qiu\Body_RunRS_new2.m',120,22)
Error: <a href="matlab: opentoline('C:\Projects\fMRI\BodyBias-Qiu\Body_RunRS_new2.m',120,22)">File: Body_RunRS_new2.m Line: 120 Column: 22
</a>Invalid expression. Check for missing or extra characters.

list.view      = views(list.view)

list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    movingDirs: [72×1 double]
     direction: [72×1 double]
        angle1: [72×1 double]
          view: {72×1 cell}
        figure: [1×72 double]
        angle2: [1×72 double]

NTrial

NTrial = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    RS: 72

minNTrial

minNTrial =

    36

minNTrial = length(directions) * length(movingDirs) * length(views) * size(startAngles,2);
list.view      = views(list.view)

list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    movingDirs: [48×1 double]
     direction: [48×1 double]
        angle1: [48×1 double]
          view: {48×1 cell}
        figure: [1×48 double]
        angle2: [1×48 double]

    list.direction = directions(list.direction)

list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    movingDirs: [48×1 double]
     direction: {48×1 cell}
        angle1: [48×1 double]
          view: {48×1 cell}
        figure: [1×48 double]
        angle2: [1×48 double]

    list.figure    = figures(list.figure)

list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    movingDirs: [48×1 double]
     direction: {48×1 cell}
        angle1: [48×1 double]
          view: {48×1 cell}
        figure: {48×1 cell}
        angle2: [1×48 double]

movingDirs(themovingdir)

ans =

    90

list.angle1(id2) + movingDirs(themovingdir)

ans =

   135
   135
   135
   135
   135
   135
   135
   135

list.angle2(id2)

ans =

    45    45    45    45    45    45    45    45

90 - list.angle1(id)

ans =

    45
    45
    45
    45
    45
    45
    45
    45
    45
    45
    45
    45
    45
    45
    45
    45

list.angle2(id,1) = 90 - list.angle1(id);
list.view      = views(list.view)

list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    movingDirs: [48×1 double]
     direction: [48×1 double]
        angle1: [48×1 double]
          view: {48×1 cell}
        figure: [1×48 double]
        angle2: [48×48 double]

    list.direction = directions(list.direction)

list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    movingDirs: [48×1 double]
     direction: {48×1 cell}
        angle1: [48×1 double]
          view: {48×1 cell}
        figure: [1×48 double]
        angle2: [48×48 double]

    list.figure    = figures(list.figure)

list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    movingDirs: [48×1 double]
     direction: {48×1 cell}
        angle1: [48×1 double]
          view: {48×1 cell}
        figure: {48×1 cell}
        angle2: [48×48 double]

id = find(list.movingDir==movingDirs(3));
{Reference to non-existent field 'movingDir'.
} 
movingDirs

movingDirs =

    -6
     6
    90


list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    movingDir: [48×1 double]
    direction: [48×1 double]
       angle1: [48×1 double]
         view: {48×1 cell}
       figure: [1×48 double]
       angle2: [48×47 double]


list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    movingDir: [48×1 double]
    direction: {48×1 cell}
       angle1: [48×1 double]
         view: {48×1 cell}
       figure: [1×48 double]
       angle2: [48×47 double]


list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    movingDir: [48×1 double]
    direction: {48×1 cell}
       angle1: [48×1 double]
         view: {48×1 cell}
       figure: {48×1 cell}
       angle2: [48×47 double]

id = find(list.movingDir==movingDirs(3));
TRS.correctKey(id) = deal(correctKeys{themovingdir})
{Unable to perform assignment because the indices on the left side are not compatible with the size of the
right side.
} 
TRS.correctKey(id)
{Undefined variable "TRS" or class "TRS.correctKey".
} 
correctKeys{themovingdir}

ans =

     1     2

TRS.correctKey(id) = deal(correctKeys(themovingdir))

TRS = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

    correctKey: {1×48 cell}

TRS = struct2table(list);
TRS.correctKey(id) = deal(correctKeys(themovingdir))

TRS =

  48×7 <a href="matlab:helpPopup table" style="font-weight:bold">table</a>

    <strong>movingDir</strong>    <strong>direction</strong>    <strong>angle1</strong>    <strong>view</strong>    <strong>figure</strong>       <strong>angle2</strong>         <strong>correctKey</strong> 
    <strong>_________</strong>    <strong>_________</strong>    <strong>______</strong>    <strong>____</strong>    <strong>______</strong>    <strong>_____________</strong>    <strong>____________</strong>

       -6         'Front'       51      'L'      'Ma'     [1x47 double]    []          
       -6         'Back'        51      'R'      'Ma'     [1x47 double]    []          
       -6         'Back'        45      'L'      'Fe'     [1x47 double]    []          
       -6         'Front'       45      'L'      'Fe'     [1x47 double]    []          
       -6         'Front'       45      'R'      'Ma'     [1x47 double]    []          
       -6         'Back'        51      'L'      'Ma'     [1x47 double]    []          
       -6         'Back'        45      'R'      'Fe'     [1x47 double]    []          
       -6         'Front'       51      'R'      'Fe'     [1x47 double]    []          
       -6         'Back'        45      'L'      'Ma'     [1x47 double]    []          
       -6         'Front'       51      'L'      'Ma'     [1x47 double]    []          
       -6         'Back'        51      'L'      'Fe'     [1x47 double]    []          
       -6         'Front'       45      'L'      'Fe'     [1x47 double]    []          
       -6         'Back'        51      'R'      'Fe'     [1x47 double]    []          
       -6         'Front'       51      'R'      'Fe'     [1x47 double]    []          
       -6         'Front'       45      'R'      'Ma'     [1x47 double]    []          
       -6         'Back'        45      'R'      'Ma'     [1x47 double]    []          
        6         'Back'        45      'L'      'Ma'     [1x47 double]    []          
        6         'Front'       39      'R'      'Ma'     [1x47 double]    []          
        6         'Back'        39      'L'      'Fe'     [1x47 double]    []          
        6         'Front'       45      'R'      'Fe'     [1x47 double]    []          
        6         'Front'       39      'L'      'Ma'     [1x47 double]    []          
        6         'Back'        45      'R'      'Ma'     [1x47 double]    []          
        6         'Front'       45      'L'      'Fe'     [1x47 double]    []          
        6         'Back'        39      'R'      'Fe'     [1x47 double]    []          
        6         'Front'       39      'R'      'Ma'     [1x47 double]    []          
        6         'Back'        45      'L'      'Ma'     [1x47 double]    []          
        6         'Back'        39      'L'      'Fe'     [1x47 double]    []          
        6         'Front'       45      'L'      'Fe'     [1x47 double]    []          
        6         'Back'        39      'R'      'Fe'     [1x47 double]    []          
        6         'Front'       39      'L'      'Fe'     [1x47 double]    []          
        6         'Front'       45      'R'      'Ma'     [1x47 double]    []          
        6         'Back'        45      'R'      'Ma'     [1x47 double]    []          
       90         'Back'        45      'L'      'Ma'     [1x47 double]    [1×2 double]
       90         'Front'       45      'L'      'Ma'     [1x47 double]    [1×2 double]
       90         'Back'        45      'R'      'Fe'     [1x47 double]    [1×2 double]
       90         'Front'       45      'R'      'Fe'     [1x47 double]    [1×2 double]
       90         'Front'       45      'L'      'Ma'     [1x47 double]    [1×2 double]
       90         'Back'        45      'R'      'Ma'     [1x47 double]    [1×2 double]
       90         'Front'       45      'R'      'Fe'     [1x47 double]    [1×2 double]
       90         'Back'        45      'L'      'Fe'     [1x47 double]    [1×2 double]
       90         'Back'        45      'R'      'Ma'     [1x47 double]    [1×2 double]
       90         'Front'       45      'L'      'Ma'     [1x47 double]    [1×2 double]
       90         'Front'       45      'R'      'Fe'     [1x47 double]    [1×2 double]
       90         'Back'        45      'L'      'Fe'     [1x47 double]    [1×2 double]
       90         'Back'        45      'L'      'Fe'     [1x47 double]    [1×2 double]
       90         'Front'       45      'L'      'Fe'     [1x47 double]    [1×2 double]
       90         'Front'       45      'R'      'Ma'     [1x47 double]    [1×2 double]
       90         'Back'        45      'R'      'Ma'     [1x47 double]    [1×2 double]

Unable to perform assignment because the left and right sides have a different number of elements.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('Body_RunRS_new2', 'C:\Projects\fMRI\BodyBias-Qiu\Body_RunRS_new2.m', 120)" style="font-weight:bold">Body_RunRS_new2</a> (<a href="matlab: opentoline('C:\Projects\fMRI\BodyBias-Qiu\Body_RunRS_new2.m',120,0)">line 120</a>)
    list.direction2(list.movingDir==3) = 3 - list.direction;

opentoline('C:\Projects\fMRI\BodyBias-Qiu\Body_RunRS_new2.m',120,0)
list.direction2(list.movingDir==3) = 3 - list.direction(list.movingDir==3);
list.view      = views(list.view);
    list.direction = directions(list.direction);
    list.figure    = figures(list.figure);
correctKeys{themovingdir}

ans =

     1     2

list.correctKey{id} = deal(correctKeys{themovingdir})
{Expected one output from a curly brace or dot indexing expression, but there were 16 results.
} 
[list.correctKey{id}] = deal(correctKeys{themovingdir})

list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

     movingDir: [48×1 double]
     direction: {48×1 cell}
        angle1: [48×1 double]
          view: {48×1 cell}
        figure: {48×1 cell}
        angle2: [48×48 double]
    direction2: [48×1 double]
    correctKey: {1×48 cell}

TRS = struct2table(list);
list

list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

     movingDir: [48×1 double]
     direction: {48×1 cell}
        angle1: [48×1 double]
          view: {48×1 cell}
    correctKey: {48×1 cell}
        figure: {48×1 cell}
        angle2: [48×48 double]
    direction2: [48×1 double]

list

list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

     movingDir: [48×1 double]
     direction: {48×1 cell}
        angle1: [48×1 double]
          view: {48×1 cell}
    correctKey: {48×1 cell}
        figure: {48×1 cell}
        angle2: [1×48 double]
    direction2: [48×1 double]

90 - list.angle1(id2)

ans =

    45
    45
    45
    45
    45
    45
    45
    45

list.angle2(id2)

ans =

    45    45    45    45    45    45    45    45

id2

id2 =

  48×1 <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a> array

   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   1
   0
   0
   1
   1
   0
   1
   0
   1
   0
   1
   0
   0
   1
   1
   0

list

list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

     movingDir: [48×1 double]
     direction: {48×1 cell}
        angle1: [48×1 double]
          view: {48×1 cell}
    correctKey: {48×1 cell}
        figure: {48×1 cell}
        angle2: [1×48 double]
    direction2: [48×1 double]

clear list
list.movingDir= repelem(movingDirs, NTrial.RS/length(movingDirs),1);
    
    [list.direction, list.angle1, list.view] = deal(zeros(size(list.movingDir)));
themovingdir = 1

themovingdir =

     1

id = list.movingDir == movingDirs(themovingdir);
        [list.correctKey{id,1}] = deal(correctKeys{themovingdir});
        % second condi: directions
        list.direction(id,1) = randSamp(1:length(directions), length(find(id)), 'n');
thedirection = 1

thedirection =

     1

id2 = id & list.direction==thedirection;
            list.figure(id2) = figure2use;
            
            % third level: start angle            
            list.angle1(id2) = randSamp(startAngles(themovingdir,:), length(find(id2)), 'n');
list.angle2(id2) = list.angle1(id2) + movingDirs(themovingdir);
list

list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

     movingDir: [48×1 double]
     direction: [48×1 double]
        angle1: [48×1 double]
          view: [48×1 double]
    correctKey: {16×1 cell}
        figure: [0 2 0 1 0 1 0 2 0 1 0 2 0 1 2]
        angle2: [0 45 0 39 0 45 0 39 0 39 0 45 0 45 39]

list.angle1(id2)

ans =

    51
    45
    51
    45
    45
    51
    51
    45

movingDirs(themovingdir)

ans =

    -6

list.angle1(id2) + movingDirs(themovingdir)

ans =

    45
    39
    45
    39
    39
    45
    45
    39

list.angle2(id2)

ans =

    45    39    45    39    39    45    45    39

list

list = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

     movingDir: [48×1 double]
     direction: {48×1 cell}
        angle1: [48×1 double]
        angle2: [48×1 double]
          view: {48×1 cell}
    correctKey: {48×1 cell}
        figure: {48×1 cell}
    direction2: [48×1 double]

TRS = struct2table(list);
list.direction2 = directions(list.direction2);
TRS = struct2table(list);
Unable to perform assignment because the left and right sides have a different number of elements.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('Body_RunRS_new2', 'C:\Projects\fMRI\BodyBias-Qiu\Body_RunRS_new2.m', 120)" style="font-weight:bold">Body_RunRS_new2</a> (<a href="matlab: opentoline('C:\Projects\fMRI\BodyBias-Qiu\Body_RunRS_new2.m',120,0)">line 120</a>)
    list.direction2(list.movingDir==movingDirs(3)) = 3 - list.direction(list.movingDir==3);

opentoline('C:\Projects\fMRI\BodyBias-Qiu\Body_RunRS_new2.m',120,0)
list.direction2(list.movingDir==movingDirs(3)) = 3 - list.direction(list.movingDir==movingDirs(3));
% convert to condition names
    list.view       = views(list.view);
    list.direction  = directions(list.direction);
    list.direction2 = directions(list.direction2);
    list.figure     = figures(list.figure);
TRS = struct2table(list);
T.image1 = strcat('Stimuli/', T.direction,  '-Upper-shoulder-middle/', T.figure, '_', T.direction, '_', num2str(T.angle1), T.view, '.png');
{Undefined variable "T" or class "T.direction".
} 
% construct the table for Repetition Suppresion
    T = struct2table(list); 

    % make image and loop through the list and create texture from image
    
    T.image1 = strcat('Stimuli/', T.direction,  '-Upper-shoulder-middle/', T.figure, '_', T.direction, '_', num2str(T.angle1), T.view, '.png');
    T.image2 = strcat('Stimuli/', T.direction2, '-Upper-shoulder-middle/', T.figure, '_', T.direction, '_', num2str(T.angle2), T.view, '.png');
% also some none trials
    Tnone = T(1,:); % only one row
    [Tnone.angle1, Tnone.angle2, Tnone.image1, Tnone.image2, Tnone.img1Txt, Tnone.img2Txt]  = deal(NaN);
    
    % combine these three trial types together and randomize
    NTrial.none = 24;
    T = [T; repmat(Tnone, NTrial.none/height(Tnone), 1)];
{All tables in the bracketed expression must have the same number of variables.
} 
[Tnone.angle1, Tnone.angle2, Tnone.image1, Tnone.image2, Tnone.img1Txt, Tnone.img2Txt]  = deal(NaN);
T = [T; repmat(Tnone, NTrial.none/height(Tnone), 1)];
{All tables in the bracketed expression must have the same number of variables.
} 
Body_RunRS_new2
{Undefined function or variable 'RunInfo'.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('Body_RunRS_new2', 'C:\Projects\fMRI\BodyBias-Qiu\Body_RunRS_new2.m', 22)" style="font-weight:bold">Body_RunRS_new2</a> (<a href="matlab: opentoline('C:\Projects\fMRI\BodyBias-Qiu\Body_RunRS_new2.m',22,0)">line 22</a>)
    RunNo = RunInfo(1);
} 
clear
Body_RunRS_new2
PTB-WARNING: Call to PsychAvSetMmMaxThreadCharacteristics() for Vista-MMCSS scheduling failed for threadhandle 00007FFE388D3F80. Setting thread priority to HIGHEST as a work-around...
Bitsi_Scanner: No Com port given, running in testing mode...
