function classification(subj_id, useFreq)

addpath('/home/predatt/qiuhan/Documents/Toolboxs/fieldtrip-20250114')
addpath('/home/predatt/qiuhan/Documents/Toolboxs/MVPA-Light-master/startup')
addpath('/home/predatt/qiuhan/MEG/scripts/subfun')
ft_defaults
ft_warning off
startup_MVPA_Light


try

    subjects = datainfo();
    mkdir(fullfile(subjects(subj_id).results, '04_decoding_on_freq'))

    fprintf('*** SUBJECT %02d : epoching ***\n', subj_id);

    %% load data
        load(fullfile(subjects(subj_id).dir, "freq_trials.mat"))


    data_MEG = load_clean_data(subj_id);
    

    % downsample for decoding to save time
    cfg = [];
    cfg.resamplefs = 300;
    cfg.demean = 'no';
    cfg.detrend = 'no';
    data_MEG = ft_resampledata(cfg, data_MEG);

    % load behavior data
    load(subjects(subj_id).behav); % variable named as data
    prm.tag.tag_frex

        % read trl_keep which contain index of trials kept after pre-proc
    load(fullfile(subjects(subj_id).dir, 'preproc-artifacts-rejectvisual-muscle.mat'),...
        'tri_keep');
    Behav = T(tri_keep, :);
    assert(height(Behav)==size(data_MEG.trialinfo, 1), 'Trial number does not match behavior!')


    %% do time-frequency analysis first

  cfg              = [];
  cfg.keeptrials = 'yes';
cfg.output       = 'pow';
cfg.channel      = 'MEG';
cfg.method       = 'mtmconvol';
cfg.taper        = 'hanning';
cfg.foi          = 2:2:30;                         % analysis 2 to 30 Hz in steps of 2 Hz
cfg.t_ftimwin    = ones(length(cfg.foi),1).*0.5;   % length of time window = 0.5 sec
cfg.toi          = -2:0.05:2.4;                  % time window "slides" from -0.5 to 1.5 sec in steps of 0.05 sec (50 ms)
TFRhann = ft_freqanalysis(cfg, data_MEG);

% plot
cfg = [];
cfg.zlim         = [-2.5e-27 2.5e-27];
cfg.showlabels   = 'yes';
cfg.layout       = 'CTF151.lay';
figure
ft_multiplotTFR(cfg, TFRhann);

cfg = [];
cfg.maskstyle    = 'saturation';
cfg.zlim         = [-2.5e-27 2.5e-27];
cfg.channel      = 'MRC15';
cfg.layout       = 'CTF151.lay';
figure
ft_singleplotTFR(cfg, TFRhann);


    %% classification of angles
    stimuli = {'Body', 'Line'};
    
    trial_stim = strcmp(Behav.stimulus,'Body') +1; % 1 for line, 2 for body

%% (2) Classification of 4D time-frequency data
% Based on the time-frequency data created in the previous section, we will
% use mv_classify to perform a classification for each time-frequency point 
% separately.

cfg = [];
cfg.classifier      = 'multiclass_lda';
cfg.metric          = 'accuracy';

% mv_classify needs to be told which dimensions encode the samples and
% features. 
cfg.sample_dimension    = 1;
cfg.feature_dimension   = 2;

% optional: provide the names of the dimensions for nice output
cfg.dimension_names = {'samples','channels','frequencies','time points'};

    for thestim = 1:2
        for theview = 1:2
            trials = find(trial_stim==thestim& Behav.view1==theview); % 1 for line, 2 for body

            cfg_select = [];
            cfg_select.trials = trials;
            thedata = ft_selectdata(cfg_select, TFRhann);

            [~, result] = mv_classify(cfg, thedata.powspctrm, Behav.angleTarget(trials));

            stat_decoding_on_freq{thestim, theview} = result;

            subplot(2, 2, 2*(thestim-1)+theview)
            mv_plot_result(result, thedata.time, thedata.freq)


        end
    end


        % plot
        % figure; hold on;
        % fg = plot(stat_angle{thestim}.time, stat_angle{thestim}.accuracy');
        % fill([-1.5 -1 -1 -1.5], [0, 0,  0.4, 0.4],'yellow','LineStyle', 'none', 'FaceAlpha',0.1)
        % fill([0, 2.4, 2.4, 0], [0, 0,  0.4, 0.4],'blue','LineStyle', 'none', 'FaceAlpha',0.1)
        % yline(1/length(unique(cfg.design)))
        % xline(0, '--')
        % xlabel('time (s)')
        % ylabel('decoding accuracy')
        % title(['Angle decoding for stimulus: ' stimuli{thestim}])
        % saveas(fg,fullfile(subjects(subj_id).results, ['/04_decoding_on_freq/decode_angle_' stimuli{thestim} '.jpg']));

    save(fullfile(subjects(subj_id).results, '04_decoding_on_freq', 'stat_decoding_on_freq.mat'),...
        'stat_decoding_on_freq', 'cfg');


catch ME
    save(fullfile(subjects(subj_id).results, '04_decoding_on_freq','errorState'));
    rethrow(ME);
end